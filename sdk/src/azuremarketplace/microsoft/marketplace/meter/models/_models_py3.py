# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._metering_api_enums import *


class BatchUsageEvent(msrest.serialization.Model):
    """BatchUsageEvent.

    :param request:
    :type request: list[~microsoft.marketplace.meter.models.UsageEvent]
    """

    _validation = {
        'request': {'max_items': 25, 'min_items': 1},
    }

    _attribute_map = {
        'request': {'key': 'request', 'type': '[UsageEvent]'},
    }

    def __init__(
        self,
        *,
        request: Optional[List["UsageEvent"]] = None,
        **kwargs
    ):
        super(BatchUsageEvent, self).__init__(**kwargs)
        self.request = request


class BatchUsageEventOkResponse(msrest.serialization.Model):
    """BatchUsageEventOkResponse.

    :param result:
    :type result: list[~microsoft.marketplace.meter.models.UsageBatchEventOkMessage]
    :param count:
    :type count: int
    """

    _attribute_map = {
        'result': {'key': 'result', 'type': '[UsageBatchEventOkMessage]'},
        'count': {'key': 'count', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        result: Optional[List["UsageBatchEventOkMessage"]] = None,
        count: Optional[int] = None,
        **kwargs
    ):
        super(BatchUsageEventOkResponse, self).__init__(**kwargs)
        self.result = result
        self.count = count


class UsageBatchEventOkMessage(msrest.serialization.Model):
    """UsageBatchEventOkMessage.

    :param usage_event_id: Unique identifier associated with the usage event.
    :type usage_event_id: str
    :param status: Status of the operation. Possible values include: "Accepted", "Expired",
     "Duplicate", "Error", "ResourceNotFound", "ResourceNotAuthorized", "InvalidDimension",
     "InvalidQuantity", "BadArgument".
    :type status: str or ~microsoft.marketplace.meter.models.UsageEventStatusEnum
    :param message_time: Time this message was created in UTC.
    :type message_time: ~datetime.datetime
    :param resource_id: Identifier of the resource against which usage is emitted.
    :type resource_id: str
    :param resource_uri: Identifier of the managed app resource against which usage is emitted.
    :type resource_uri: str
    :param quantity: Number of units consumed.
    :type quantity: float
    :param dimension: Dimension identifier.
    :type dimension: str
    :param effective_start_time: Time in UTC when the usage event occurred.
    :type effective_start_time: ~datetime.datetime
    :param plan_id: Plan associated with the purchased offer.
    :type plan_id: str
    :param error:
    :type error: ~microsoft.marketplace.meter.models.UsageEventConflictResponse
    """

    _attribute_map = {
        'usage_event_id': {'key': 'usageEventId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'message_time': {'key': 'messageTime', 'type': 'iso-8601'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'dimension': {'key': 'dimension', 'type': 'str'},
        'effective_start_time': {'key': 'effectiveStartTime', 'type': 'iso-8601'},
        'plan_id': {'key': 'planId', 'type': 'str'},
        'error': {'key': 'error', 'type': 'UsageEventConflictResponse'},
    }

    def __init__(
        self,
        *,
        usage_event_id: Optional[str] = None,
        status: Optional[Union[str, "UsageEventStatusEnum"]] = None,
        message_time: Optional[datetime.datetime] = None,
        resource_id: Optional[str] = None,
        resource_uri: Optional[str] = None,
        quantity: Optional[float] = None,
        dimension: Optional[str] = None,
        effective_start_time: Optional[datetime.datetime] = None,
        plan_id: Optional[str] = None,
        error: Optional["UsageEventConflictResponse"] = None,
        **kwargs
    ):
        super(UsageBatchEventOkMessage, self).__init__(**kwargs)
        self.usage_event_id = usage_event_id
        self.status = status
        self.message_time = message_time
        self.resource_id = resource_id
        self.resource_uri = resource_uri
        self.quantity = quantity
        self.dimension = dimension
        self.effective_start_time = effective_start_time
        self.plan_id = plan_id
        self.error = error


class UsageEvent(msrest.serialization.Model):
    """UsageEvent.

    :param resource_id: subscriptionId property value for SaaS offer subscriptions; resourceUsageId
     property on the managed application resource for managed application offers. For managed
     applications, only use one of resourceId or resourceUri.
    :type resource_id: str
    :param resource_uri: Resource URI for the managed app. Used with managed applications. Only use
     resourceUri or resourceId, but never both.
    :type resource_uri: str
    :param quantity: Number of units consumed.
    :type quantity: float
    :param dimension: Dimension identifier.
    :type dimension: str
    :param effective_start_time: Time in UTC when the usage event occurred.
    :type effective_start_time: ~datetime.datetime
    :param plan_id: Plan associated with the purchased offer.
    :type plan_id: str
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'dimension': {'key': 'dimension', 'type': 'str'},
        'effective_start_time': {'key': 'effectiveStartTime', 'type': 'iso-8601'},
        'plan_id': {'key': 'planId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        resource_uri: Optional[str] = None,
        quantity: Optional[float] = None,
        dimension: Optional[str] = None,
        effective_start_time: Optional[datetime.datetime] = None,
        plan_id: Optional[str] = None,
        **kwargs
    ):
        super(UsageEvent, self).__init__(**kwargs)
        self.resource_id = resource_id
        self.resource_uri = resource_uri
        self.quantity = quantity
        self.dimension = dimension
        self.effective_start_time = effective_start_time
        self.plan_id = plan_id


class UsageEventBadRequestResponse(msrest.serialization.Model):
    """UsageEventBadRequestResponse.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~microsoft.marketplace.meter.models.UsageEventBadRequestResponseDetail]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[UsageEventBadRequestResponseDetail]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["UsageEventBadRequestResponseDetail"]] = None,
        **kwargs
    ):
        super(UsageEventBadRequestResponse, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class UsageEventBadRequestResponseDetail(msrest.serialization.Model):
    """UsageEventBadRequestResponseDetail.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param target:
    :type target: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(UsageEventBadRequestResponseDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class UsageEventConflictResponse(msrest.serialization.Model):
    """UsageEventConflictResponse.

    :param additional_info:
    :type additional_info:
     ~microsoft.marketplace.meter.models.UsageEventConflictResponseAdditionalInfo
    :param message:
    :type message: str
    :param code:
    :type code: str
    """

    _attribute_map = {
        'additional_info': {'key': 'additionalInfo', 'type': 'UsageEventConflictResponseAdditionalInfo'},
        'message': {'key': 'message', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_info: Optional["UsageEventConflictResponseAdditionalInfo"] = None,
        message: Optional[str] = None,
        code: Optional[str] = None,
        **kwargs
    ):
        super(UsageEventConflictResponse, self).__init__(**kwargs)
        self.additional_info = additional_info
        self.message = message
        self.code = code


class UsageEventConflictResponseAdditionalInfo(msrest.serialization.Model):
    """UsageEventConflictResponseAdditionalInfo.

    :param accepted_message:
    :type accepted_message: ~microsoft.marketplace.meter.models.UsageEventOkResponse
    """

    _attribute_map = {
        'accepted_message': {'key': 'acceptedMessage', 'type': 'UsageEventOkResponse'},
    }

    def __init__(
        self,
        *,
        accepted_message: Optional["UsageEventOkResponse"] = None,
        **kwargs
    ):
        super(UsageEventConflictResponseAdditionalInfo, self).__init__(**kwargs)
        self.accepted_message = accepted_message


class UsageEventOkResponse(msrest.serialization.Model):
    """UsageEventOkResponse.

    :param usage_event_id: Unique identifier associated with the usage event.
    :type usage_event_id: str
    :param status: Status of the operation. Possible values include: "Accepted", "Expired",
     "Duplicate", "Error", "ResourceNotFound", "ResourceNotAuthorized", "InvalidDimension",
     "InvalidQuantity", "BadArgument".
    :type status: str or ~microsoft.marketplace.meter.models.UsageEventStatusEnum
    :param message_time: Time this message was created in UTC.
    :type message_time: ~datetime.datetime
    :param resource_id: Identifier of the resource against which usage is emitted.
    :type resource_id: str
    :param resource_uri: Identifier of the managed app resource against which usage is emitted.
    :type resource_uri: str
    :param quantity: Number of units consumed.
    :type quantity: float
    :param dimension: Dimension identifier.
    :type dimension: str
    :param effective_start_time: Time in UTC when the usage event occurred.
    :type effective_start_time: ~datetime.datetime
    :param plan_id: Plan associated with the purchased offer.
    :type plan_id: str
    """

    _attribute_map = {
        'usage_event_id': {'key': 'usageEventId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'message_time': {'key': 'messageTime', 'type': 'iso-8601'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'dimension': {'key': 'dimension', 'type': 'str'},
        'effective_start_time': {'key': 'effectiveStartTime', 'type': 'iso-8601'},
        'plan_id': {'key': 'planId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        usage_event_id: Optional[str] = None,
        status: Optional[Union[str, "UsageEventStatusEnum"]] = None,
        message_time: Optional[datetime.datetime] = None,
        resource_id: Optional[str] = None,
        resource_uri: Optional[str] = None,
        quantity: Optional[float] = None,
        dimension: Optional[str] = None,
        effective_start_time: Optional[datetime.datetime] = None,
        plan_id: Optional[str] = None,
        **kwargs
    ):
        super(UsageEventOkResponse, self).__init__(**kwargs)
        self.usage_event_id = usage_event_id
        self.status = status
        self.message_time = message_time
        self.resource_id = resource_id
        self.resource_uri = resource_uri
        self.quantity = quantity
        self.dimension = dimension
        self.effective_start_time = effective_start_time
        self.plan_id = plan_id
